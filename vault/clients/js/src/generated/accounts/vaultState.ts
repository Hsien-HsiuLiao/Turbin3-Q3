/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const VAULT_STATE_DISCRIMINATOR = new Uint8Array([
  228, 196, 82, 165, 98, 210, 235, 152,
]);

export function getVaultStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VAULT_STATE_DISCRIMINATOR);
}

export type VaultState = {
  discriminator: ReadonlyUint8Array;
  vaultBump: number;
  vaultstateBump: number;
};

export type VaultStateArgs = { vaultBump: number; vaultstateBump: number };

export function getVaultStateEncoder(): Encoder<VaultStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['vaultBump', getU8Encoder()],
      ['vaultstateBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VAULT_STATE_DISCRIMINATOR })
  );
}

export function getVaultStateDecoder(): Decoder<VaultState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['vaultBump', getU8Decoder()],
    ['vaultstateBump', getU8Decoder()],
  ]);
}

export function getVaultStateCodec(): Codec<VaultStateArgs, VaultState> {
  return combineCodec(getVaultStateEncoder(), getVaultStateDecoder());
}

export function decodeVaultState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VaultState, TAddress>;
export function decodeVaultState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VaultState, TAddress>;
export function decodeVaultState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VaultState, TAddress> | MaybeAccount<VaultState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultStateDecoder()
  );
}

export async function fetchVaultState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VaultState, TAddress>> {
  const maybeAccount = await fetchMaybeVaultState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVaultState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VaultState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVaultState(maybeAccount);
}

export async function fetchAllVaultState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VaultState>[]> {
  const maybeAccounts = await fetchAllMaybeVaultState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVaultState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VaultState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVaultState(maybeAccount));
}

export function getVaultStateSize(): number {
  return 10;
}
