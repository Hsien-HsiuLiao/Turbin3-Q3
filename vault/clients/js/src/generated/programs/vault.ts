/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCloseInstruction,
  type ParsedDepositInstruction,
  type ParsedInitializeInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';

export const VAULT_PROGRAM_ADDRESS =
  '9mty1m2J4XajzDPSyUgdH8iq7bRtN1SXNhwewAi3M2SA' as Address<'9mty1m2J4XajzDPSyUgdH8iq7bRtN1SXNhwewAi3M2SA'>;

export enum VaultAccount {
  VaultState,
}

export function identifyVaultAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VaultAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 196, 82, 165, 98, 210, 235, 152])
      ),
      0
    )
  ) {
    return VaultAccount.VaultState;
  }
  throw new Error(
    'The provided account could not be identified as a vault account.'
  );
}

export enum VaultInstruction {
  Close,
  Deposit,
  Initialize,
  Withdraw,
}

export function identifyVaultInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VaultInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 165, 201, 177, 108, 65, 206, 96])
      ),
      0
    )
  ) {
    return VaultInstruction.Close;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return VaultInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return VaultInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return VaultInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a vault instruction.'
  );
}

export type ParsedVaultInstruction<
  TProgram extends string = '9mty1m2J4XajzDPSyUgdH8iq7bRtN1SXNhwewAi3M2SA',
> =
  | ({
      instructionType: VaultInstruction.Close;
    } & ParsedCloseInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
